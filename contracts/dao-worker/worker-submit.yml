zenchain: 1.0
start: worker-submit0.zen
blocks:
  worker-submit0.zen:
    zenContent: |
      Rule caller restroom-mw

      Scenario 'ethereum': read eth address

      Given I read the content of 'keys.json'

      Given I have a 'ethereum address'
      Given I have a 'integer' named 'dao_vote_id'
      Given I have a 'integer' named 'request_id'
      Given I have a 'ethereum address' named 'caller_address'
      Given I have a 'string' named 'eth_url'
      Given I have a 'string' named 'endpoint'

      Then print data
    keysFile: worker-submit0.keys
    next: worker-submit1.zen
  worker-submit1.zen:
    zenContent: >
      Rule caller restroom-mw

      Scenario ethereum: verify sig


      Given I read the content of 'keys.json'


      Given I have a ethereum endpoint named 'eth_url'




      Given I have a 'string' named 'non verified'

      Given I have a 'string' named 'verified'

      Given I have a 'string' named 'message'

      Given I have a 'string array' named 'typeSpec'


      Given I read the ethereum nonce for 'ethereum_address'


      # in this script we verify an array of signatures against an array of
      addresses

      # and we return the results as an array


      # Here we load the signatures array, the adresses array and the messages

      # the arrays can be of arbitrary length, but elements of the respective
      arrays have to match


      Given my name is in a 'string' named 'identity'

      Given I have my 'keyring'


      Given I have a 'integer' named 'dao vote id'

      Given I have a 'integer' named 'request id'

      Given I have a 'hex' named 'caller address'


      Given I have a ethereum endpoint named 'eth_url'

      Given I have a 'ethereum address' named 'dao address'

      Given I have a 'ethereum nonce'

      Given I have a 'ethereum method' named 'submitMethod'

      # Given I read the ethereum nonce for 'ethereum address'

      Given I read the ethereum suggested gas price

      and a 'gas price'

      and a 'gas limit'


      Given that I have an endpoint named 'endpoint'


      Given I have a 'string dictionary' named 'dataFromEndpoint'


      Given I connect to 'endpoint' and save the output into 'dataFromEndpoint'


      Given I have a 'ethereum signature array' in path
      'dataFromEndpoint.result.signatures'

      Given I have a 'ethereum address array' in path
      'dataFromEndpoint.result.addresses'

      Given I have a 'string' in path 'dataFromEndpoint.result.signed-string'


      When I create the ethereum address


      # here we create an empty array that will be returned as output

      When I create the 'string array' named 'verification-output'


      When I set 'status and' to 'true' as 'string'


      # here we setup a nested foreach loop, to verify each signature for each
      address

      # and define that we will call each element of the arrays 'loop signature'
      and 'loop address'

      Foreach 'loop_signature' in 'signatures'

      Foreach 'loop_address' in 'addresses'


      # here we are formatting the structure of the outout

      When I create the 'string dictionary' named 'output'

      When I write string '' in 'address'

      When I append the 'ethereum address' of 'loop_address' to 'address'

      When I move 'address' in 'output'


      # Here we are setting a status as 'non verified', which we'll change if
      the verification succeeds

      When I set 'status' to 'not verified' as 'string'


      # here we have a conditional statement that verifies the transaction:

      # if succeded, the status is changed to 'verified'

      If I verify the 'signed-string' has a ethereum signature in
      'loop_signature' by 'loop_address'


      When I delete 'status'

      When I set 'status' to 'verified' as 'string'


      endif


      if I verify 'status' is equal to 'non verified'

      When I delete 'status and'

      When I set 'status and' to 'false' as 'string'

      endif

      # here we do the last steps in composing the output

      When I move 'status' in 'output'

      When I move 'output' in 'verification-output'


      # here we end the foreach double loop

      endforeach


      When I create the new array

      When I move 'message' in 'new array'

      When I copy 'ethereum address' in 'new array'

      When I move 'caller address' in 'new array'

      When I move 'dao vote id' in 'new array'

      When I create the ethereum abi encoding of 'new array' using 'typeSpec'

      When I create the hash of 'ethereum abi encoding' using 'keccak256'

      When I delete 'new array'


      When I rename the 'hash' to 'message.keccak'


      When I create the ethereum signature of 'message.keccak'

      When I copy 'ethereum signature' to 'ethereum signature rsv'


      When I create the new array

      When I pickup from path 'ethereum signature.v'

      When I move 'v' in 'new array'

      When I pickup from path 'ethereum signature.r'

      When I move 'r' in 'new array'

      When I pickup from path 'ethereum signature.s'

      When I move 's' in 'new array'

      When I copy 'status_and' in 'new array'


      When I create the ethereum transaction to 'dao address'

      and I use the ethereum transaction to run 'submitMethod' using 'new array'


      When I create the signed ethereum transaction for chain 'fabt'

      Then print the 'signed ethereum transaction'


      Then print the 'new array'


      # here we print the results as an array

      Then print the 'verification-output'

      Then print the 'status and'


      Then print the 'ethereum signature'

      Then print the 'ethereum abi encoding'

      Then print the 'ethereum signature rsv' as 'hex'


      Then print the 'ethereum address'
